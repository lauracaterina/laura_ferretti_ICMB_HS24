[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "This website contains my ongoing assignments for the course Introduction to Computational Modeling of Behavior (HS24, University of Zurich).\nAuthor: Laura Ferretti\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About"
    ]
  },
  {
    "objectID": "hw2/index.html",
    "href": "hw2/index.html",
    "title": "Assignment 2: Replicate Simulation",
    "section": "",
    "text": "Make list with normal distribution data\n\n\nCode\nN  &lt;- 5000 # Default size of the population\nMU &lt;- 100 # Default mean of the population\n\npopulation &lt;- rnorm(N, mean = MU, sd = MU / 5)\nhist(population) #check whether it's normally distributed\n\n\n\n\n\n\n\n\n\nCompute Gini coefficient\n\n\nCode\ngini &lt;- function(y) {\n  #Compute the Gini coefficient (a measure of equality/inequality) in a population, y\n  y &lt;- sort(y)\n  n &lt;- length(y)\n  numer &lt;- 2 * sum((1:n) * y[1:n]) #for i in range starts with 0 in python, indexing also with 0\n  denom &lt;- n * sum(y)\n   return((numer / denom) - (n + 1) / n) #brackets are needed for return fun in R\n}\ngini(population)\n\n\n[1] 0.1128566\n\n\nDefine Transactions function\n\n\nCode\nrandom_split &lt;- function(A, B) {\n  #Take all the money in the pot and divide it randomly between the two actors\n  pot &lt;- A + B\n  share &lt;- runif(1,0,pot)\n  return(c(share, pot-share))\n}\nrandom_split(100,100)\n\n\n[1]  14.7597 185.2403\n\n\nDefine Interaction function\n\n\nCode\nanyone &lt;- function(N) {\n return(sample(N,2))\n}\n\nanyone(N)\n\n\n[1] 620 512\n\n\nSimulation\nFirst, I need to figure out, whether my code idea will work\nNow I can define the function that will split the money between two agents and save the new money that they have for each agent (one step of the simulation)\n\n\nCode\nstep &lt;- function(population, transaction_fun=random_split, interaction_fun=anyone) {\n  #Modify the population by doing one transaction.\n  j &lt;- interaction_fun(length(population))\n  newmoney &lt;- transaction_fun(population[j[1]], population[j[2]]) \n  population[j[1]] &lt;- newmoney[1]\n  population[j[2]] &lt;- newmoney[2]\n return(population)\n}\n\n\nNow I can define the function of the whole simulation\n\n\nCode\nsimulate &lt;- function(population, T, step_fun=step, transaction_fun=random_split, interaction_fun=anyone) {\n    #Run simulation on population for T transactions; save every step in list\n  pop_copy &lt;- population #I can directly copy, doesn't change og pop list\n  \n  #instead of yield, make a list\n  list_steps &lt;- list()\n\n  list_steps[[1]] &lt;- pop_copy\n  \n  for (t in 1:T) {\n    pop_copy &lt;- step_fun(population, transaction_fun, interaction_fun)\n    list_steps[[t + 1]] &lt;- pop_copy\n  }\n  return(list_steps)\n}\n\n\nsimulate(population = c(100,100,100,100), T=10)\n\n\n[[1]]\n[1] 100 100 100 100\n\n[[2]]\n[1] 100.00000  47.51528 152.48472 100.00000\n\n[[3]]\n[1]  37.24665 100.00000 100.00000 162.75335\n\n[[4]]\n[1] 117.20641 100.00000 100.00000  82.79359\n\n[[5]]\n[1] 100.00000 100.00000  37.58592 162.41408\n\n[[6]]\n[1] 112.88071 100.00000  87.11929 100.00000\n\n[[7]]\n[1] 124.8944  75.1056 100.0000 100.0000\n\n[[8]]\n[1]  34.6397 165.3603 100.0000 100.0000\n\n[[9]]\n[1] 163.4966 100.0000 100.0000  36.5034\n\n[[10]]\n[1] 100.00000 100.00000 103.50885  96.49115\n\n[[11]]\n[1] 100.00000 100.00000  52.48393 147.51607\n\n\nSimulation Visualization\n\n\nCode\nshow &lt;- function(population, k=40, percentiles=c(1, 10, 50, 90, 99)) {\n    #Run a simulation for k*N steps, printing statistics and displaying a plot and histogram\n  N &lt;- length(population)\n\n  # Run simulation\ny &lt;- simulate(population, T=N*k)#every person does k transactions\n  \n  results &lt;- data.frame()\n  for (t in 1:N*k) {\n    if ((t %% (N*k %/% 10)) == 0) {#only save ten steps\n      results[[length(results) + 1]] &lt;- sort(y[[t]])\n      t\n    }\n  }\n\n} \n  \n#     # Printout:\n#   cat('   t    Gini stdev', sprintf(' %3d%%', percentiles), '\\n')\n#   cat('------- ---- -----', paste(rep(' ----', length(percentiles)), collapse = ''), '\\n')\n#   fmt &lt;- '%7d %.2f %5.1f'\n#   t &lt;- 1\n#   for (result in results) {\n#     \n#     pop &lt;- result$pop\n#     if (t %% (k * N / 10) == 0) {\n#       data &lt;- sapply(percentiles, function(pct) percent(pct, pop))\n#       cat(sprintf(fmt, t, gini(pop), sd(pop), data), '\\n')\n#     }\n#   }\n#    \n#   \n# }\n\n# show(population)\n# \n# \n# \n#     library(ggplot2)\n# \n# show &lt;- function(population, k = 40, percentiles = c(1, 10, 50, 90, 99), ...) {\n#   N &lt;- length(population)\n#   start &lt;- as.list(population)\n#   \n#   \n#   results &lt;- lapply(seq(0, k * N - 1, by = N / 10), function(t) {\n#     pop &lt;- simulate(population, T = k * N, ...)\n#     return(list(t = t, pop = sort(pop)))\n#   })\n#   \n# \n#   \n#   # Plotting\n#   times &lt;- sapply(results, function(res) res$t)\n#   line_data &lt;- lapply(percentiles, function(pct) sapply(results, function(res) percent(pct, res$pop)))\n#   \n#   plot(NULL, xlim = range(c(start, population)), ylim = range(times), xlab = 'wealth', ylab = 'time', main = paste(percentiles, collapse = '/'), type = 'n')\n#   grid()\n#   for (i in seq_along(percentiles)) {\n#     lines(line_data[[i]], times, col = i)\n#   }\n#   legend(\"topright\", legend = percentiles, col = seq_along(percentiles), lty = 1)\n#   \n#   # Histograms\n#   R &lt;- range(c(population, start))\n#   par(mfrow = c(1, 2))\n#   hist(start, main = 'start', xlim = R)\n#   hist(population, main = 'end', xlim = R)\n#   \n#   # Ordered Curves\n#   order &lt;- seq_along(population)\n#   plot(sort(start), order, type = 'l', col = 'blue', xlab = 'wealth', ylab = 'order', main = 'Ordered Curves')\n#   lines(sort(population), order, col = 'red')\n#   grid()\n#   legend(\"topright\", legend = c('start', 'end'), col = c('blue', 'red'), lty = 1)\n# }\n# \n# percent &lt;- function(pct, items) {\n#   \"The item that is pct percent through the sorted list of items.\"\n#   return(items[min(length(items), length(items) * pct %/% 100 + 1)])\n# }\n# \n# \n# show(population)\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website contains my ongoing assignments for the course Introduction to Computational Modeling of Behavior (HS24, University of Zurich).\nAuthor: Laura Ferretti\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "hw1/index.html",
    "href": "hw1/index.html",
    "title": "Assignment 1: Hello World",
    "section": "",
    "text": "In this introductory assignment, I just want you to make a simple plot. Here is an example:\n\n\nCode\nx &lt;- rnorm(10000, mean = 100, sd = 15)\nhist(x)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Assignment 1: Hello World"
    ]
  },
  {
    "objectID": "hw2_fin/index.html",
    "href": "hw2_fin/index.html",
    "title": "Assignment 2: Simulation",
    "section": "",
    "text": "Make list with normal distribution data\n\n\nCode\nN  &lt;- 5000 # Default size of the population\nMU &lt;- 100 # Default mean of the population\n\npopulation &lt;- rnorm(N, mean = MU, sd = MU / 5)\nhist(population) #check whether it's normally distributed\n\n\n\n\n\n\n\n\n\nCompute Gini coefficient\n\n\nCode\ngini &lt;- function(y) {\n  #Compute the Gini coefficient (a measure of equality/inequality) in a population, y\n  y &lt;- sort(y)\n  n &lt;- length(y)\n  numer &lt;- 2 * sum((1:n) * y[1:n]) #for i in range starts with 0 in python, indexing also with 0\n  denom &lt;- n * sum(y)\n   return((numer / denom) - (n + 1) / n) #brackets are needed for return fun in R\n}\ngini(population)\n\n\n[1] 0.1135069\n\n\nDefine Transactions function\n\n\nCode\nrandom_split &lt;- function(A, B) {\n  #Take all the money in the pot and divide it randomly between the two actors\n  pot &lt;- A + B\n  share &lt;- runif(1,0,pot)\n  return(c(share, pot-share))\n}\nrandom_split(100,100)\n\n\n[1]  31.6513 168.3487\n\n\nDefine Interaction function\n\n\nCode\nanyone &lt;- function(N) {\n return(sample(N,2))\n}\n\nanyone(N)\n\n\n[1] 3281 1468\n\n\nSimulation\nFirst, I need to figure out, whether my code idea will work\nNow I can define the function that will split the money between two agents and save the new money that they have for each agent (one step of the simulation)\n\n\nCode\nstep &lt;- function(population, transaction_fun=random_split, interaction_fun=anyone) {\n  #Modify the population by doing one transaction.\n  j &lt;- interaction_fun(length(population))\n  newmoney &lt;- transaction_fun(population[j[1]], population[j[2]]) \n  population[j[1]] &lt;- newmoney[1]\n  population[j[2]] &lt;- newmoney[2]\n return(population)\n}\n\n\nNow I can define the function of the whole simulation\n\n\nCode\nsimulate &lt;- function(population, T, step_fun=step, transaction_fun=random_split, interaction_fun=anyone) {\n  # Run simulation on population for T transactions; save every step in a list\n  pop_copy &lt;- population # Make a copy of the original population list to avoid altering it\n\n  # Initialize an empty list to store steps\n  list_steps &lt;- list()\n  \n  # Save the initial population (at t = 0)\n  list_steps[[1]] &lt;- list(population = pop_copy, t = 0)\n  \n  # Simulate T steps\n  for (t in 1:T) {\n    # Update population using the step function\n    pop_copy &lt;- step_fun(pop_copy, transaction_fun, interaction_fun)\n    \n    # Save the current population and the step number\n    list_steps[[t + 1]] &lt;- list(population = pop_copy, t = t)\n  }\n  \n  return(list_steps)  # Return the list of steps\n}\n\ntest &lt;- simulate(population = c(100,100,100,100), T=10)\n\n\nSimulation Visualization\n\n\nCode\nshow &lt;- function(population, k=40, percentiles=c(1, 10, 50, 90, 99)) {\n    #Run a simulation for k*N steps, printing statistics and displaying a plot and histogram\n  N &lt;- length(population)\n\n  # Run simulation\ny &lt;- simulate(population, T=N*k)#every person does k transactions\n  cat('   t    Gini stdev', sprintf(' %3d%%', percentiles), '\\n')\n   cat('------- ---- -----', paste(rep(' ---- ', length(percentiles)), collapse = ''), '\\n')\n   fmt &lt;- '%7d %.2f %5.1f'\n   \n   #make sure that the first row is added (in my simulation result, the first row has the 0 step)\n   pop &lt;- sort(y[[1]]$population)\n      data &lt;- sapply(percentiles, function(pct) quantile(pop, pct/100))\n       cat(sprintf(fmt, y[[1]]$t, gini(y[[1]]$population), sd(pop)), \n          sprintf(' %4.0f', data), '\\n')\n   \n\n  for (l in 1:N*k) {\n    if ((l %% (N*k %/% 10)) == 0) {#only save ten steps (which is divisable in ten steps)\n      \n      pop &lt;- sort(y[[l+1]]$population)\n      data &lt;- sapply(percentiles, function(pct) quantile(pop, pct/100))\n       cat(sprintf(fmt, y[[l+1]]$t, gini(y[[l+1]]$population), sd(pop)), \n          sprintf(' %4.0f', data), '\\n')\n    }\n  }\n       ### Making histogram ###\n    #    R &lt;- range(c(y[[1]]$population, y[[length(y)]]$population)) # Combines 'start' and 'pop' and computes the range\n    # \n    # # Create the histogram for the start population\n    # hist(start, main=\"Histograms: Start\", xlim=R, col=rgb(0.2, 0.4, 0.6, 0.7), \n    #      xlab=\"Wealth\", ylab=\"Frequency\")\n    # \n    # # Overlay the histogram for the end population\n    # hist(pop, main=\"Histograms: End\", xlim=R, col=rgb(0.8, 0.2, 0.2, 0.5), \n    #      add=TRUE, xlab=\"Wealth\", ylab=\"Frequency\")\n    # \n    # # Add a legend to differentiate the histograms\n    # legend(\"topright\", legend=c(\"Start\", \"End\"), fill=c(rgb(0.2, 0.4, 0.6, 0.7), \n    #        rgb(0.8, 0.2, 0.2, 0.5)))\n  \n} \n\nshow(population = c(100,100,100,100,100,100,100,100,100,100))\n\n\n   t    Gini stdev    1%   10%   50%   90%   99% \n------- ---- -----  ----  ----  ----  ----  ----  \n      0 0.00   0.0   100   100   100   100   100 \n     40 0.55 110.8     1     5    52   198   336 \n     80 0.43  83.7    19    23    75   202   265 \n    120 0.55 110.7     1     8    72   208   338 \n    160 0.35  65.3     6    25    86   177   189 \n    200 0.53 107.1     3     4    56   204   328 \n    240 0.48  96.0     7    11    69   200   303 \n    280 0.51 108.3    12    19    58   193   348 \n    320 0.54 112.8     2     6    60   266   337 \n    360 0.55 117.5     6    13    63   287   339 \n    400 0.39  79.8    21    34    82   206   268 \n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Assignment 2: Simulation"
    ]
  }
]