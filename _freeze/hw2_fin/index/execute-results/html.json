{
  "hash": "fe432bd6d7352cd46a4afd6418e305d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 2: Simulation\"\n---\n\n\n\n\n**Make list with normal distribution data**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN  <- 5000 # Default size of the population\nMU <- 100 # Default mean of the population\n\npopulation <- rnorm(N, mean = MU, sd = MU / 5)\nhist(population) #check whether it's normally distributed\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n**Compute Gini coefficient**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngini <- function(y) {\n  #Compute the Gini coefficient (a measure of equality/inequality) in a population, y\n  y <- sort(y)\n  n <- length(y)\n  numer <- 2 * sum((1:n) * y[1:n]) #for i in range starts with 0 in python, indexing also with 0\n  denom <- n * sum(y)\n   return((numer / denom) - (n + 1) / n) #brackets are needed for return fun in R\n}\ngini(population)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1135069\n```\n\n\n:::\n:::\n\n\n\n\n**Define Transactions function**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_split <- function(A, B) {\n  #Take all the money in the pot and divide it randomly between the two actors\n  pot <- A + B\n  share <- runif(1,0,pot)\n  return(c(share, pot-share))\n}\nrandom_split(100,100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  31.6513 168.3487\n```\n\n\n:::\n:::\n\n\n\n\n**Define Interaction function**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanyone <- function(N) {\n return(sample(N,2))\n}\n\nanyone(N)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3281 1468\n```\n\n\n:::\n:::\n\n\n\n\n**Simulation**\n\nFirst, I need to figure out, whether my code idea will work\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nNow I can define the function that will split the money between two agents and save the new money that they have for each agent (one step of the simulation)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstep <- function(population, transaction_fun=random_split, interaction_fun=anyone) {\n  #Modify the population by doing one transaction.\n  j <- interaction_fun(length(population))\n  newmoney <- transaction_fun(population[j[1]], population[j[2]]) \n  population[j[1]] <- newmoney[1]\n  population[j[2]] <- newmoney[2]\n return(population)\n}\n```\n:::\n\n\n\n\nNow I can define the function of the whole simulation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulate <- function(population, T, step_fun=step, transaction_fun=random_split, interaction_fun=anyone) {\n  # Run simulation on population for T transactions; save every step in a list\n  pop_copy <- population # Make a copy of the original population list to avoid altering it\n\n  # Initialize an empty list to store steps\n  list_steps <- list()\n  \n  # Save the initial population (at t = 0)\n  list_steps[[1]] <- list(population = pop_copy, t = 0)\n  \n  # Simulate T steps\n  for (t in 1:T) {\n    # Update population using the step function\n    pop_copy <- step_fun(pop_copy, transaction_fun, interaction_fun)\n    \n    # Save the current population and the step number\n    list_steps[[t + 1]] <- list(population = pop_copy, t = t)\n  }\n  \n  return(list_steps)  # Return the list of steps\n}\n\ntest <- simulate(population = c(100,100,100,100), T=10)\n```\n:::\n\n\n\n\n**Simulation Visualization**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshow <- function(population, k=40, percentiles=c(1, 10, 50, 90, 99)) {\n    #Run a simulation for k*N steps, printing statistics and displaying a plot and histogram\n  N <- length(population)\n\n  # Run simulation\ny <- simulate(population, T=N*k)#every person does k transactions\n  cat('   t    Gini stdev', sprintf(' %3d%%', percentiles), '\\n')\n   cat('------- ---- -----', paste(rep(' ---- ', length(percentiles)), collapse = ''), '\\n')\n   fmt <- '%7d %.2f %5.1f'\n   \n   #make sure that the first row is added (in my simulation result, the first row has the 0 step)\n   pop <- sort(y[[1]]$population)\n      data <- sapply(percentiles, function(pct) quantile(pop, pct/100))\n       cat(sprintf(fmt, y[[1]]$t, gini(y[[1]]$population), sd(pop)), \n          sprintf(' %4.0f', data), '\\n')\n   \n\n  for (l in 1:N*k) {\n    if ((l %% (N*k %/% 10)) == 0) {#only save ten steps (which is divisable in ten steps)\n      \n      pop <- sort(y[[l+1]]$population)\n      data <- sapply(percentiles, function(pct) quantile(pop, pct/100))\n       cat(sprintf(fmt, y[[l+1]]$t, gini(y[[l+1]]$population), sd(pop)), \n          sprintf(' %4.0f', data), '\\n')\n    }\n  }\n       ### Making histogram ###\n    #    R <- range(c(y[[1]]$population, y[[length(y)]]$population)) # Combines 'start' and 'pop' and computes the range\n    # \n    # # Create the histogram for the start population\n    # hist(start, main=\"Histograms: Start\", xlim=R, col=rgb(0.2, 0.4, 0.6, 0.7), \n    #      xlab=\"Wealth\", ylab=\"Frequency\")\n    # \n    # # Overlay the histogram for the end population\n    # hist(pop, main=\"Histograms: End\", xlim=R, col=rgb(0.8, 0.2, 0.2, 0.5), \n    #      add=TRUE, xlab=\"Wealth\", ylab=\"Frequency\")\n    # \n    # # Add a legend to differentiate the histograms\n    # legend(\"topright\", legend=c(\"Start\", \"End\"), fill=c(rgb(0.2, 0.4, 0.6, 0.7), \n    #        rgb(0.8, 0.2, 0.2, 0.5)))\n  \n} \n\nshow(population = c(100,100,100,100,100,100,100,100,100,100))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   t    Gini stdev    1%   10%   50%   90%   99% \n------- ---- -----  ----  ----  ----  ----  ----  \n      0 0.00   0.0   100   100   100   100   100 \n     40 0.55 110.8     1     5    52   198   336 \n     80 0.43  83.7    19    23    75   202   265 \n    120 0.55 110.7     1     8    72   208   338 \n    160 0.35  65.3     6    25    86   177   189 \n    200 0.53 107.1     3     4    56   204   328 \n    240 0.48  96.0     7    11    69   200   303 \n    280 0.51 108.3    12    19    58   193   348 \n    320 0.54 112.8     2     6    60   266   337 \n    360 0.55 117.5     6    13    63   287   339 \n    400 0.39  79.8    21    34    82   206   268 \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}